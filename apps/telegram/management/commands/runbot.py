import logging
import os
import re
import django
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from asgiref.sync import sync_to_async
from dotenv import load_dotenv

from apps.telegram.button.button_cklient import city_keyboard, start_keyboard
from apps.telegram.models import Booking, AccommodationType, Pension, UserBusness, Invitation, District, User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token='6962324611:AAFrx-xzFHHyvBvRuy5lvEiiqpS9occpiyk')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
districts = {
    '–ë–∞–ª—ã–∫—á–∏': ['–ê–≤—Ä–æ—Ä–∞', '–ê–ª—Ç—ã–Ω'],
    '–ß–æ–ª–ø–æ–Ω-–ê—Ç–∞': ['–ì–æ–ª—É–±–æ–π', '–†–∞–¥—É–≥–∞'],
    '–ö–∞—Ä–∞–∫–æ–ª': ['–ê–ª—Ç—ã–Ω–ê—Ä–∞—à–∞–Ω', '–ö–∞—Ä–∞–∫–æ–ª'],
    '–¢—é–ø': ['–¢—é–ø—Å–∫–∏–π', '–¢—é–ø–¢–∞—É—ç—Ä'],
    '–î–∂–µ—Ç–∏–≥–µ–∑': ['–ê–≤—Ä–æ—Ä–∞', '–ê–ª—Ç—ã–Ω']
}
amenities = ['–ï–¥–∞', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞', '–£—Ç—é–≥', '–ë–∞–ª–∫–æ–Ω', 'Wi-Fi', '–ë–∞—Å—Å–µ–π–Ω', '–ü–∞—Ä–∫–æ–≤–∫–∞', '–§–∏—Ç–Ω–µ—Å-–∑–∞–ª']
accommodation_types = ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–¢–∞–Ω—Å–∞—É—Å', '–ü–µ–Ω—Ç—Ö–∞—É—Å', '–Æ—Ä—Ç–∞', '–í–∏–ª–ª–∞']

def start_keyboard2():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='—Åontinue'))
    keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞', callback_data='profile_busness'))
    return keyboard

class BookingState(StatesGroup):
    waiting_for_number_of_people = State()
    waiting_for_distance_to_beach = State()
    waiting_for_phone_number = State()
    waiting_for_price = State()
    waiting_for_photos = State()
    waiting_for_city = State()
    waiting_for_date = State()
    waiting_for_comment = State()
    waiting_for_amenities = State()
    waiting_for_invitation = State()

def create_amenities_keyboard(selected_amenities):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for amenity in amenities:
        text = f"‚úÖ {amenity}" if amenity in selected_amenities else amenity
        keyboard.insert(types.InlineKeyboardButton(text, callback_data=f'amenity_{amenity}'))
    keyboard.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data='done_selecting_amenities'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    return keyboard

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    user_id = message.from_user.id
    username = message.from_user.username

    if not await sync_to_async(UserBusness.objects.filter(user_id=user_id).exists)():
        start_command = message.text
        referrer_id = str(start_command[7:])
        if referrer_id:
            if referrer_id != str(user_id):
                await sync_to_async(UserBusness.objects.create)(user_id=user_id, referrer_id=referrer_id)
                await bot.send_message(referrer_id, '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.')
            else:
                await sync_to_async(UserBusness.objects.create)(user_id=user_id)
                await message.answer("–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
        else:
            await sync_to_async(UserBusness.objects.create)(user_id=user_id)

    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton('–ö–ª–∏–µ–Ω—Ç', callback_data='client_start'),
            types.InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å', callback_data='business_start')
        )
    )

@dp.callback_query_handler(lambda c: c.data == 'client_start')
async def client_start(callback_query: types.CallbackQuery):
    logging.info("Callback client_start –ø–æ–ª—É—á–µ–Ω")
    keyboard = start_keyboard()
    await callback_query.message.edit_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üè® –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –æ—Ç–µ–ª–µ–π –∏ –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–æ–≤. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ! üåç‚ú®\n\n",
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ client_start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

@dp.callback_query_handler(lambda c: c.data == 'business_start')
async def business_start(callback_query: types.CallbackQuery):
    logging.info("Callback business_start –ø–æ–ª—É—á–µ–Ω")
    keyboard = start_keyboard2()
    await callback_query.message.edit_text(
       """ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '–ë–∏–∑–Ω–µ—Å'.
        –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:
        1) –ì–æ—Ä–æ–¥ :
        2) –†–∞–π–æ–Ω :
        3) –ü–∞–Ω—Å–∏–æ–Ω–∞—Ç—ã :
        4) –¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ :
        5) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç :
        6) –£–¥–æ–±—Å—Ç–≤–∞ :
        7) –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª—è–∂–∞ –æ—Ç –æ—Ç–µ–ª—è :
        8) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è +996):
        9) –¶–µ–Ω–∞ :
        10) –§–æ—Ç–æ –æ—Ç–µ–ª—è :""",
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ business_start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

@dp.callback_query_handler(lambda c: c.data == '—Åontinue')
async def —Åontinue(callback_query: types.CallbackQuery):
    logging.info("Callback —Åontinue –ø–æ–ª—É—á–µ–Ω")
    business_text = """
    –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω.
    """
    keyboard = types.InlineKeyboardMarkup()
    for district in districts.keys():
        keyboard.add(types.InlineKeyboardButton(district, callback_data=f'district_{district}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    await callback_query.message.edit_text(business_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data == 'profile_busness')
async def profile_busness(query: types.CallbackQuery):
    user_id = query.from_user.id
    username = query.from_user.username

    profile_text = f"""
    –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
    ID: {user_id}
    Username: {username}
    """

    keyboard = types.InlineKeyboardMarkup()
    if username.startswith('busness_'):
        keyboard.add(types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è', callback_data='search'))
        profile_text += "\n\n–í—ã –∫–ª–∏–µ–Ω—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π."
    else:
        keyboard.add(types.InlineKeyboardButton('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='my_ads_busness'))

    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))

    await query.message.edit_text(profile_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('district_'))
async def district_pensions(query: types.CallbackQuery, state: FSMContext):
    district = query.data.split('_')[1]
    await state.update_data(district=district)
    keyboard = types.InlineKeyboardMarkup()
    for pension in districts[district]:
        keyboard.add(types.InlineKeyboardButton(pension, callback_data=f'pension_{pension[:30]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='business_start'))
    await query.message.edit_text("–ü–∞–Ω—Å–∏–æ–Ω–∞—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('pension_'))
async def select_accommodation_type(query: types.CallbackQuery, state: FSMContext):
    pension = query.data.split('_')[1]
    await state.update_data(pension=pension)
    keyboard = types.InlineKeyboardMarkup()
    for acc_type in accommodation_types:
        keyboard.add(types.InlineKeyboardButton(acc_type, callback_data=f'acc_{acc_type[:30]}'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'district_{(await state.get_data()).get("district")}'))
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('acc_'))
async def ask_number_of_people(query: types.CallbackQuery, state: FSMContext):
    accommodation = query.data.split('_')[1]
    await state.update_data(accommodation=accommodation)
    await query.message.edit_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç :", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'pension_{(await state.get_data()).get("pension")[:30]}')))
    await BookingState.waiting_for_number_of_people.set()

@dp.message_handler(state=BookingState.waiting_for_number_of_people)
async def number_of_people(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:")
        return
    number_of_people = int(message.text)
    await state.update_data(number_of_people=number_of_people)
    await ask_amenities(message)

async def ask_amenities(message: types.Message):
    keyboard = create_amenities_keyboard([])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)
    await BookingState.waiting_for_amenities.set()

@dp.callback_query_handler(lambda query: query.data.startswith('amenity_'), state=BookingState.waiting_for_amenities)
async def select_amenity(query: types.CallbackQuery, state: FSMContext):
    amenity = query.data.split('_')[1]
    data = await state.get_data()
    selected_amenities = data.get('selected_amenities', [])
    if amenity not in selected_amenities:
        selected_amenities.append(amenity)
        logging.info(f"–£—Å–ª—É–≥–∞ '{amenity}' –≤—ã–±—Ä–∞–Ω–∞")
    else:
        selected_amenities.remove(amenity)
        logging.info(f"–£—Å–ª—É–≥–∞ '{amenity}' –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.update_data(selected_amenities=selected_amenities)
    keyboard = create_amenities_keyboard(selected_amenities)
    await query.message.edit_reply_markup(reply_markup=keyboard)
    await query.answer(f"–£–¥–æ–±—Å—Ç–≤–æ {amenity} –≤—ã–±—Ä–∞–Ω–æ")

@dp.callback_query_handler(lambda query: query.data == 'done_selecting_amenities', state=BookingState.waiting_for_amenities)
async def done_selecting_amenities(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_amenities = data.get('selected_amenities', [])
    await state.update_data(selected_amenities=selected_amenities)
    logging.info(f"–í—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–¥–æ–±—Å—Ç–≤–∞: {', '.join(selected_amenities)}")
    await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —É–¥–æ–±—Å—Ç–≤–∞: {', '.join(selected_amenities)}")
    await ask_distance_to_beach(query.message)

async def ask_distance_to_beach(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª—è–∂–∞ (–≤ –º–µ—Ç—Ä–∞—Ö):", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    await BookingState.waiting_for_distance_to_beach.set()

@dp.message_handler(state=BookingState.waiting_for_distance_to_beach)
async def distance_to_beach(message: types.Message, state: FSMContext):
    distance_text = message.text.strip()
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    distance_text = ''.join(filter(str.isdigit, distance_text))
    if not distance_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª—è–∂–∞ (–≤ –º–µ—Ç—Ä–∞—Ö):")
        return
    distance_to_beach = int(distance_text)
    await state.update_data(distance_to_beach=distance_to_beach)
    await ask_phone_number(message)

async def ask_phone_number(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +996):", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    await BookingState.waiting_for_phone_number.set()

@dp.message_handler(state=BookingState.waiting_for_phone_number)
async def phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()
    if not phone_number.startswith("+996") or not phone_number[4:].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +996):")
        return
    await state.update_data(phone_number=phone_number)
    await ask_price(message, state)

async def ask_price(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Å–æ–º–∞—Ö):", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    await BookingState.waiting_for_price.set()

@dp.message_handler(state=BookingState.waiting_for_price)
async def price(message: types.Message, state: FSMContext):
    price_text = message.text.strip()
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    price_text = ''.join(filter(str.isdigit, price_text))
    if not price_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–≤ —Å–æ–º–∞—Ö):")
        return
    price = int(price_text)
    await state.update_data(price=price)
    await ask_photos(message, state)

async def ask_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_message_id = data.get('photo_message_id')
    if photo_message_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=photo_message_id)

    msg = await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç 5 –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", 
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', callback_data='done_uploading_photos')
        )
    )
    await state.update_data(photo_message_id=msg.message_id)
    await BookingState.waiting_for_photos.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=BookingState.waiting_for_photos)
async def handle_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    photo_id = message.photo[-1].file_id
    photos.append(photo_id)
    await state.update_data(photos=photos)

    # Edit the existing message with the new photo count
    photo_message_id = data.get('photo_message_id')
    if photo_message_id:
        await bot.edit_message_text(
            f"–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ {10 - len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            chat_id=message.chat.id,
            message_id=photo_message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', callback_data='done_uploading_photos')
            )
        )

@dp.callback_query_handler(lambda query: query.data == 'done_uploading_photos', state=BookingState.waiting_for_photos)
async def done_uploading_photos(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])

    if len(photos) < 5:
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
    else:
        await state.update_data(photos=photos)
        await state.update_data(user_id=query.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await ask_for_invitation(query.message, state)

async def ask_for_invitation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    await message.answer(
        f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ç–µ–ª—å', –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è:\n\n"
        f"–î–ª—è –±–æ—Ç–∞: [https://t.me/WeartherallBot?start={user_id}](https://t.me/WeartherallBot?start={user_id})",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'),
            types.InlineKeyboardButton('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ç–µ–ª—å', callback_data='check_invitation')
        ),
        parse_mode=types.ParseMode.MARKDOWN
    )
    await BookingState.waiting_for_invitation.set()

@dp.callback_query_handler(lambda query: query.data == 'check_invitation', state=BookingState.waiting_for_invitation)
async def check_invitation(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    referrer_id = await sync_to_async(UserBusness.objects.filter(user_id=user_id).values_list('referrer_id', flat=True).first)()
    invited_user_exists = await sync_to_async(UserBusness.objects.filter(referrer_id=user_id).exists)()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è user ID: {user_id}, invited_user_exists: {invited_user_exists}")

    if invited_user_exists:
        await save_booking(query.message, state)
    else:
        await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å –æ—Ç–µ–ª—å.")
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

async def save_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.chat.id
    region_name = data['district']  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'district' —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω 'region'
    city = data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    checkout_date = data.get('checkout_date', '1970-01-01')
    comment = data.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
    number_of_people = data['number_of_people']
    selected_amenities = data.get('selected_amenities', [])
    distance_to_beach = data.get('distance_to_beach', 0)
    phone_number = data.get('phone_number', '')
    price = data.get('price', 0)
    photos = data.get('photos', [])

    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è: {data}")

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ User —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user, created = await sync_to_async(User.objects.get_or_create)(id=user_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    booking = await sync_to_async(Booking.objects.create)(
        user=user,
        region=region_name,
        city=city,
        checkout_date=checkout_date,
        comment=comment,
        number_of_people=number_of_people,
        amenities=selected_amenities,
        distance_to_beach=distance_to_beach,
        phone_number=phone_number,
        price=price,
        photos=",".join(photos)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await message.answer(
        "–í–∞—à –æ—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ—â–µ', callback_data='business_start'))
    )
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'profile')
async def profile(query: types.CallbackQuery):
    user_id = query.from_user.id
    username = query.from_user.username

    profile_text = f"""
    –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
    ID: {user_id}
    Username: {username}
    """

    keyboard = types.InlineKeyboardMarkup()
    if username.startswith('client_'):
        keyboard.add(types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è', callback_data='search'))
        profile_text += "\n\n–í—ã –∫–ª–∏–µ–Ω—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π."
    else:
        keyboard.add(types.InlineKeyboardButton('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='my_ads'))

    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))

    await query.message.edit_text(profile_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data == 'back', state='*')
async def back_to_start(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('–ö–ª–∏–µ–Ω—Ç', callback_data='client_start'),
        types.InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å', callback_data='business_start')
    ))

@dp.callback_query_handler(lambda query: query.data == 'search')
async def search(query: types.CallbackQuery):
    await query.message.edit_text("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üîç")

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member_handler(message: types.Message):
    new_members = message.new_chat_members
    inviter_id = message.from_user.id

    for member in new_members:
        referrer_id = inviter_id
        logging.info(f"ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {referrer_id}")
        referrer_user = await sync_to_async(UserBusness.objects.get)(user_id=referrer_id)

        new_user, created = await sync_to_async(UserBusness.objects.get_or_create)(
            user_id=member.id,
            defaults={'referrer_id': referrer_id, 'referral_status': 1}
        )
        
        if not created:
            new_user.referrer_id = referrer_id
            new_user.referral_status = 1
            await sync_to_async(new_user.save)()

        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {new_user.user_id}, –ø—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer_id}, —Å–æ–∑–¥–∞–Ω: {created}")

        await sync_to_async(Invitation.objects.create)(user=new_user, invited_by=referrer_user)

        await bot.send_message(referrer_user.user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user.user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
        logging.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω –¥–ª—è user ID: {new_user.user_id}")

@dp.callback_query_handler(lambda query: query.data == 'my_ads')
async def my_ads(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='client_start')
    )
    await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data == 'my_ads_busness')
async def my_ads_busness(query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–û–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='—Åontinue'))
    keyboard.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='client_start'))
    await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('region_'))
async def region(query: types.CallbackQuery, state: FSMContext):
    current_text = '–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥!'
    current_markup = city_keyboard()
    await query.message.edit_text(current_text, reply_markup=current_markup)
    await BookingState.waiting_for_city.set()

@dp.callback_query_handler(state=BookingState.waiting_for_city)
async def city(query: types.CallbackQuery, state: FSMContext):
    city = query.data.split('_')[1]
    valid_cities = ['cholponata', 'balykchy', 'karakol', 'tup', 'jetiogyz']

    logging.debug(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {city}")

    if city not in valid_cities:
        current_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'
        current_markup = city_keyboard()
        await query.message.edit_text(current_text, reply_markup=current_markup)
        return

    await state.update_data(city=city)
    await query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î):', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    await BookingState.waiting_for_date.set()

@dp.message_handler(state=BookingState.waiting_for_date)
async def checkout_date(message: types.Message, state: FSMContext):
    date_pattern = re.compile(r'\d{4}\.\d{2}\.\d{2}')
    if not date_pattern.match(message.text):
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.–ú–ú.–î–î:', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
        return
    await state.update_data(checkout_date=message.text)
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')))
    await BookingState.waiting_for_comment.set()

@dp.message_handler(state=BookingState.waiting_for_comment)
async def add_comment(message: types.Message, state: FSMContext):
    comment = message.text
    async with state.proxy() as data:
        data['comment'] = comment
    await message.answer('–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏!', reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É', callback_data='client_start')))
    await state.finish()

executor.start_polling(dp, skip_updates=True)